Моей целью было реализовать такую модульную архитектуру, которая позволила бы расширять библиотеку без изменения уже существующего кода(вместо этого добавлять новые классы), что следует из принципа открытости-закрытости SOLID. 
Поэтому хочется немного задокументировать в этом поле проект и рассказать, почему он реализован именно так: с какими трудностями пришлось столкнуться.

АНАЛИЗАТОРЫ
 Библиотека состоит из множества анализаторов, что относятся к определенным типам фигур. 
Каждый анализатор реализуют один из двух интерфейсов или же оба вместе: calculateAnalyzer and checkAnalyzer, которые предоставляют интерфейс для проведения некоторых вычислений либо же проверок.
Методы этих интерфейсов ожидают перечисление в котором указан тип операции, которую необходимо выполнить.

ОПЕРАЦИИ
Операциями в данной библиотеке считаются классы, в которых реализовано некоторое действие. Операции бывают двух разновидностей: вычисляющие и проверяющие. 
Таким образом, анализатор имеет метод перенаправляющий вызов подходящей операции, которая уже выполняет некоторую логику.

ВИДЫ ОПЕРАЦИЙ
 Для каждого анализатора, соответствующего определенной фигуре, есть перечисления, в которых указываются доступные операции для данного анализатора(вычисление площади, либо, в перспективе, нахождение периметра).

ПРЕИМУЩЕСТВА
1. Благодаря данной архитектуре для расширения библиотеки новыми анализаторами, либо же расширения самого функционала уже существующих анализаторов требуется всего лишь создать новый класс, реализующий соответствующий интерфейс. 
Таким образом, нет необходимости менять существующий рабочий код, что позволяет нам избавиться от риска испортить то, что работало прекрасно. 
 2. Для каждого анализатора создается свое перечисление для определения доступных операций. Из-за этого создается сильное желание обойтись одним перечислением с определением всех возможных операций для всех фигур, но проблема в том, что не для всех фигур применимы одни и те же операции. 
Из-за чего пользователю, который захочет попользоваться, к примеру, анализатором треугольников и посмотреть, какие операции существуют в нем, будут отображаться не применимые к треугольнику операции.
Можно было бы оставить данные операции без реализации для конкретных фигур, что несомненно бы сбивало с толку пользователя, либо же выкидывать исключения при попытке вызова нерелевантной к данной фигуре операции, что в свою очередь бы было очень неудобным, ведь пользователь может и не знать,
 какие операции можно проводить над фигурой, а какие нет: это должен подсказать разработчик.